<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="FSM" nsURI="http://FSM/1.0" nsPrefix="FSM">
  <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
    <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
    <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
    <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
  </eAnnotations>
  <eClassifiers xsi:type="ecore:EClass" name="StateMachine">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="post4_s0 post4_s1 post4_s2 post4_s3 post4_s4 post4_s5 post4_s6 post4_s7 post4_s8 post4_s9 post4_s10 post4_s11"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="post4_s0" value="&#xA;&#x9;&#x9;&#x9;AbstractState.allInstances()->forAll(s | &#xA;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->forAll(t | &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy = 'T2TA' and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->includes(t) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy='T2TA' or t.genBy='T2TB' or t.genBy='T2TC') and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(not AbstractState.allInstances()->includes(t.target)) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(not (t.target.genBy='RS2RS' or t.target.genBy='IS2IS' or t.target.genBy='IS2RS'))) implies not t.target.oclIsUndefined()&#xA;&#x9;&#x9;&#x9;&#x9;) &#xA;&#x9;&#x9;&#x9;) and AbstractState.allInstances()->exists(s | &#xA;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->exists(t | &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.genBy = 'T2TA' and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->includes(t) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy='T2TA' or t.genBy='T2TB' or t.genBy='T2TC') and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(not AbstractState.allInstances()->includes(t.target)) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(not (t.target.genBy='RS2RS' or t.target.genBy='IS2IS' or t.target.genBy='IS2RS'))&#xA;&#x9;&#x9;&#x9;&#x9;) &#xA;&#x9;&#x9;&#x9;) "/>
      <details key="post4_s1" value="&#xA;&#x9;&#x9;&#x9;AbstractState.allInstances()->forAll(s | &#xA;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->forAll(t | &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy = 'T2TB' and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->includes(t) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy='T2TA' or t.genBy='T2TB' or t.genBy='T2TC') and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(not AbstractState.allInstances()->includes(t.target)) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(not (t.target.genBy='RS2RS' or t.target.genBy='IS2IS' or t.target.genBy='IS2RS'))) implies not t.target.oclIsUndefined()&#xA;&#x9;&#x9;&#x9;&#x9;) &#xA;&#x9;&#x9;&#x9;) and AbstractState.allInstances()->exists(s | &#xA;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->exists(t | &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.genBy = 'T2TB' and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->includes(t) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy='T2TA' or t.genBy='T2TB' or t.genBy='T2TC') and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(not AbstractState.allInstances()->includes(t.target)) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(not (t.target.genBy='RS2RS' or t.target.genBy='IS2IS' or t.target.genBy='IS2RS'))&#xA;&#x9;&#x9;&#x9;&#x9;) &#xA;&#x9;&#x9;&#x9;) "/>
      <details key="post4_s2" value="&#xA;&#x9;&#x9;&#x9;AbstractState.allInstances()->forAll(s | &#xA;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->forAll(t | &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy = 'T2TC' and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->includes(t) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy='T2TA' or t.genBy='T2TB' or t.genBy='T2TC') and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(not AbstractState.allInstances()->includes(t.target)) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(not (t.target.genBy='RS2RS' or t.target.genBy='IS2IS' or t.target.genBy='IS2RS'))) implies not t.target.oclIsUndefined()&#xA;&#x9;&#x9;&#x9;&#x9;) &#xA;&#x9;&#x9;&#x9;) and AbstractState.allInstances()->exists(s | &#xA;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->exists(t | &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.genBy = 'T2TC' and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->includes(t) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy='T2TA' or t.genBy='T2TB' or t.genBy='T2TC') and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(not AbstractState.allInstances()->includes(t.target)) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(not (t.target.genBy='RS2RS' or t.target.genBy='IS2IS' or t.target.genBy='IS2RS'))&#xA;&#x9;&#x9;&#x9;&#x9;) &#xA;&#x9;&#x9;&#x9;) "/>
      <details key="post4_s3" value="&#xA;&#x9;&#x9;&#x9;AbstractState.allInstances()->forAll(s | &#xA;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->forAll(t | &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy = 'T2TA' and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.target.genBy = 'RS2RS' and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->includes(t) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy='T2TA' or t.genBy='T2TB' or t.genBy='T2TC') and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AbstractState.allInstances()->includes(t.target) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.target.genBy='RS2RS' or t.target.genBy='IS2IS' or t.target.genBy='IS2RS')) implies not t.target.oclIsUndefined()&#xA;&#x9;&#x9;&#x9;&#x9;) &#xA;&#x9;&#x9;&#x9;) and AbstractState.allInstances()->exists(s | &#xA;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->exists(t | &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.genBy = 'T2TA' and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.target.genBy = 'RS2RS' and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->includes(t) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy='T2TA' or t.genBy='T2TB' or t.genBy='T2TC') and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AbstractState.allInstances()->includes(t.target) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.target.genBy='RS2RS' or t.target.genBy='IS2IS' or t.target.genBy='IS2RS')&#xA;&#x9;&#x9;&#x9;&#x9;) &#xA;&#x9;&#x9;&#x9;) "/>
      <details key="post4_s4" value="&#xA;&#x9;&#x9;&#x9;AbstractState.allInstances()->forAll(s | &#xA;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->forAll(t | &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy = 'T2TA' and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.target.genBy = 'IS2IS' and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->includes(t) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy='T2TA' or t.genBy='T2TB' or t.genBy='T2TC') and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AbstractState.allInstances()->includes(t.target) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.target.genBy='RS2RS' or t.target.genBy='IS2IS' or t.target.genBy='IS2RS')) implies not t.target.oclIsUndefined()&#xA;&#x9;&#x9;&#x9;&#x9;) &#xA;&#x9;&#x9;&#x9;) and AbstractState.allInstances()->exists(s | &#xA;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->exists(t | &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.genBy = 'T2TA' and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.target.genBy = 'IS2IS' and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->includes(t) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy='T2TA' or t.genBy='T2TB' or t.genBy='T2TC') and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AbstractState.allInstances()->includes(t.target) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.target.genBy='RS2RS' or t.target.genBy='IS2IS' or t.target.genBy='IS2RS')&#xA;&#x9;&#x9;&#x9;&#x9;) &#xA;&#x9;&#x9;&#x9;) "/>
      <details key="post4_s5" value="&#xA;&#x9;&#x9;&#x9;AbstractState.allInstances()->forAll(s | &#xA;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->forAll(t | &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy = 'T2TA' and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.target.genBy = 'IS2RS' and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->includes(t) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy='T2TA' or t.genBy='T2TB' or t.genBy='T2TC') and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AbstractState.allInstances()->includes(t.target) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.target.genBy='RS2RS' or t.target.genBy='IS2IS' or t.target.genBy='IS2RS')) implies not t.target.oclIsUndefined()&#xA;&#x9;&#x9;&#x9;&#x9;) &#xA;&#x9;&#x9;&#x9;) and AbstractState.allInstances()->exists(s | &#xA;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->exists(t | &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.genBy = 'T2TA' and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.target.genBy = 'IS2RS' and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->includes(t) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy='T2TA' or t.genBy='T2TB' or t.genBy='T2TC') and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AbstractState.allInstances()->includes(t.target) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.target.genBy='RS2RS' or t.target.genBy='IS2IS' or t.target.genBy='IS2RS')&#xA;&#x9;&#x9;&#x9;&#x9;) &#xA;&#x9;&#x9;&#x9;) "/>
      <details key="post4_s6" value="&#xA;&#x9;&#x9;&#x9;AbstractState.allInstances()->forAll(s | &#xA;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->forAll(t | &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy = 'T2TB' and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.target.genBy = 'RS2RS' and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->includes(t) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy='T2TA' or t.genBy='T2TB' or t.genBy='T2TC') and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AbstractState.allInstances()->includes(t.target) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.target.genBy='RS2RS' or t.target.genBy='IS2IS' or t.target.genBy='IS2RS')) implies not t.target.oclIsUndefined()&#xA;&#x9;&#x9;&#x9;&#x9;) &#xA;&#x9;&#x9;&#x9;) and AbstractState.allInstances()->exists(s | &#xA;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->exists(t | &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.genBy = 'T2TB' and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.target.genBy = 'RS2RS' and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->includes(t) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy='T2TA' or t.genBy='T2TB' or t.genBy='T2TC') and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AbstractState.allInstances()->includes(t.target) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.target.genBy='RS2RS' or t.target.genBy='IS2IS' or t.target.genBy='IS2RS')&#xA;&#x9;&#x9;&#x9;&#x9;) &#xA;&#x9;&#x9;&#x9;) "/>
      <details key="post4_s7" value="&#xA;&#x9;&#x9;&#x9;AbstractState.allInstances()->forAll(s | &#xA;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->forAll(t | &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy = 'T2TB' and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.target.genBy = 'IS2IS' and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->includes(t) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy='T2TA' or t.genBy='T2TB' or t.genBy='T2TC') and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AbstractState.allInstances()->includes(t.target) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.target.genBy='RS2RS' or t.target.genBy='IS2IS' or t.target.genBy='IS2RS')) implies not t.target.oclIsUndefined()&#xA;&#x9;&#x9;&#x9;&#x9;) &#xA;&#x9;&#x9;&#x9;) and AbstractState.allInstances()->exists(s | &#xA;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->exists(t | &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.genBy = 'T2TB' and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.target.genBy = 'IS2IS' and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->includes(t) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy='T2TA' or t.genBy='T2TB' or t.genBy='T2TC') and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AbstractState.allInstances()->includes(t.target) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.target.genBy='RS2RS' or t.target.genBy='IS2IS' or t.target.genBy='IS2RS')&#xA;&#x9;&#x9;&#x9;&#x9;) &#xA;&#x9;&#x9;&#x9;) "/>
      <details key="post4_s8" value="&#xA;&#x9;&#x9;&#x9;AbstractState.allInstances()->forAll(s | &#xA;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->forAll(t | &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy = 'T2TB' and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.target.genBy = 'IS2RS' and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->includes(t) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy='T2TA' or t.genBy='T2TB' or t.genBy='T2TC') and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AbstractState.allInstances()->includes(t.target) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.target.genBy='RS2RS' or t.target.genBy='IS2IS' or t.target.genBy='IS2RS')) implies not t.target.oclIsUndefined()&#xA;&#x9;&#x9;&#x9;&#x9;) &#xA;&#x9;&#x9;&#x9;) and AbstractState.allInstances()->exists(s | &#xA;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->exists(t | &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.genBy = 'T2TB' and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.target.genBy = 'IS2RS' and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->includes(t) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy='T2TA' or t.genBy='T2TB' or t.genBy='T2TC') and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AbstractState.allInstances()->includes(t.target) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.target.genBy='RS2RS' or t.target.genBy='IS2IS' or t.target.genBy='IS2RS')&#xA;&#x9;&#x9;&#x9;&#x9;) &#xA;&#x9;&#x9;&#x9;) "/>
      <details key="post4_s9" value="&#xA;&#x9;&#x9;&#x9;AbstractState.allInstances()->forAll(s | &#xA;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->forAll(t | &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy = 'T2TC' and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.target.genBy = 'RS2RS' and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->includes(t) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy='T2TA' or t.genBy='T2TB' or t.genBy='T2TC') and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AbstractState.allInstances()->includes(t.target) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.target.genBy='RS2RS' or t.target.genBy='IS2IS' or t.target.genBy='IS2RS')) implies not t.target.oclIsUndefined()&#xA;&#x9;&#x9;&#x9;&#x9;) &#xA;&#x9;&#x9;&#x9;) and AbstractState.allInstances()->exists(s | &#xA;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->exists(t | &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.genBy = 'T2TC' and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.target.genBy = 'RS2RS' and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->includes(t) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy='T2TA' or t.genBy='T2TB' or t.genBy='T2TC') and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AbstractState.allInstances()->includes(t.target) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.target.genBy='RS2RS' or t.target.genBy='IS2IS' or t.target.genBy='IS2RS')&#xA;&#x9;&#x9;&#x9;&#x9;) &#xA;&#x9;&#x9;&#x9;) "/>
      <details key="post4_s10" value="&#xA;&#x9;&#x9;&#x9;AbstractState.allInstances()->forAll(s | &#xA;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->forAll(t | &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy = 'T2TC' and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.target.genBy = 'IS2IS' and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->includes(t) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy='T2TA' or t.genBy='T2TB' or t.genBy='T2TC') and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AbstractState.allInstances()->includes(t.target) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.target.genBy='RS2RS' or t.target.genBy='IS2IS' or t.target.genBy='IS2RS')) implies not t.target.oclIsUndefined()&#xA;&#x9;&#x9;&#x9;&#x9;) &#xA;&#x9;&#x9;&#x9;) and AbstractState.allInstances()->exists(s | &#xA;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->exists(t | &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.genBy = 'T2TC' and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.target.genBy = 'IS2IS' and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->includes(t) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy='T2TA' or t.genBy='T2TB' or t.genBy='T2TC') and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AbstractState.allInstances()->includes(t.target) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.target.genBy='RS2RS' or t.target.genBy='IS2IS' or t.target.genBy='IS2RS')&#xA;&#x9;&#x9;&#x9;&#x9;) &#xA;&#x9;&#x9;&#x9;) "/>
      <details key="post4_s11" value="&#xA;&#x9;&#x9;&#x9;AbstractState.allInstances()->forAll(s | &#xA;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->forAll(t | &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy = 'T2TC' and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.target.genBy = 'IS2RS' and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->includes(t) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy='T2TA' or t.genBy='T2TB' or t.genBy='T2TC') and&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AbstractState.allInstances()->includes(t.target) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.target.genBy='RS2RS' or t.target.genBy='IS2IS' or t.target.genBy='IS2RS')) implies not t.target.oclIsUndefined()&#xA;&#x9;&#x9;&#x9;&#x9;) &#xA;&#x9;&#x9;&#x9;) and AbstractState.allInstances()->exists(s | &#xA;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->exists(t | &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.genBy = 'T2TC' and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;t.target.genBy = 'IS2RS' and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Transition.allInstances()->includes(t) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.genBy='T2TA' or t.genBy='T2TB' or t.genBy='T2TC') and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AbstractState.allInstances()->includes(t.target) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(t.target.genBy='RS2RS' or t.target.genBy='IS2IS' or t.target.genBy='IS2RS')&#xA;&#x9;&#x9;&#x9;&#x9;) &#xA;&#x9;&#x9;&#x9;) "/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="transitions" upperBound="-1"
        eType="#//Transition" containment="true" eOpposite="#//Transition/stateMachine"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="states" upperBound="-1"
        eType="#//AbstractState" containment="true" eOpposite="#//AbstractState/stateMachine"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="genBy" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Transition">
    <eStructuralFeatures xsi:type="ecore:EReference" name="stateMachine" eType="#//StateMachine"
        eOpposite="#//StateMachine/transitions"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="source" lowerBound="1"
        eType="#//AbstractState"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="target" lowerBound="1"
        eType="#//AbstractState"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="label" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="genBy" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AbstractState" abstract="true">
    <eStructuralFeatures xsi:type="ecore:EReference" name="stateMachine" eType="#//StateMachine"
        eOpposite="#//StateMachine/states"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="compositeState" eType="#//CompositeState"
        eOpposite="#//CompositeState/states"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="genBy" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InitialState" eSuperTypes="#//AbstractState"/>
  <eClassifiers xsi:type="ecore:EClass" name="RegularState" eSuperTypes="#//AbstractState"/>
  <eClassifiers xsi:type="ecore:EClass" name="CompositeState" eSuperTypes="#//AbstractState">
    <eStructuralFeatures xsi:type="ecore:EReference" name="states" upperBound="-1"
        eType="#//AbstractState" eOpposite="#//AbstractState/compositeState"/>
  </eClassifiers>
</ecore:EPackage>
