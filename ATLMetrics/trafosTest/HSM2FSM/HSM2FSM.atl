-- @atlcompiler emftvm
-- @path HSM=metamodels/input/HSM.ecore
-- @path FSM=metamodels/output/FSM.ecore
 
module HSM2FSM;

create OUT : FSM from IN : HSM;

rule SM2SM { 
    from sm1 : HSM!StateMachine
    to sm2 : FSM!StateMachine ( name <- sm1.name, genBy <- 'SM2SM')
}

rule RS2RS {
    from rs1 : HSM!RegularState
    to rs2 : FSM!RegularState ( name <- rs1.name,stateMachine <- rs1.stateMachine , genBy <- 'RS2RS')
}

-- Initial states of composite states become regular states in the flattened SM
rule IS2IS {
    from is1 : HSM!InitialState (is1.compositeState.oclIsUndefined())
    to   is2 : FSM!InitialState  ( stateMachine <- is1.stateMachine, name <- is1.name, genBy <- 'IS2IS' )
}

-- Initial states of composite states become regular states in the flattened SM
rule IS2RS {
    from is1 : HSM!InitialState (not is1.compositeState.oclIsUndefined())
    to   is2 : FSM!RegularState  ( stateMachine <- is1.stateMachine, name <- is1.name, genBy <- 'IS2RS' )
}




-- Transitions between two non-composite states are mapped one-to-one
rule T2TA {
    from t1 : HSM!Transition ( not t1.source.oclIsTypeOf(HSM!CompositeState) and not t1.target.oclIsTypeOf(HSM!CompositeState))
    to   t2 : FSM!Transition ( label <- t1.label, stateMachine <- t1.stateMachine, source <- t1.source, target <- t1.target, genBy <- 'T2TA' )
}

-- This rule resolves a transition originating from a composite state 
-- The guard [not (c = src)] is the missing piece to verify fsm_transition_src_multi_lower.
rule T2TB {
    from t1 : HSM!Transition,
         src : HSM!CompositeState, 
         trg : HSM!AbstractState,
         c : HSM!AbstractState (t1.source = src and t1.target = trg and c.compositeState = src and not trg.oclIsTypeOf(HSM!CompositeState))
    to   t2 : FSM!Transition ( label <- t1.label, stateMachine <- t1.stateMachine, source <- c, target <- trg, genBy <- 'T2TB' )
}

-- This rule resolves a transition ending in a composite state 
rule T2TC {
    from t1 : HSM!Transition,
         src : HSM!AbstractState, 
         trg : HSM!CompositeState,
         c : HSM!InitialState ( t1.source = src and t1.target = trg and c.compositeState = trg  and not src.oclIsTypeOf(HSM!CompositeState) )
    to   t2 : FSM!Transition ( label <- t1.label, stateMachine <- t1.stateMachine, source <- src, target <- c, genBy <- 'T2TC' )
}
